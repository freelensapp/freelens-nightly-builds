name: Release nightly

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  make-release:
    name: make release

    permissions: write-all

    runs-on: ubuntu-latest

    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Create nightly release
        uses: viperproject/create-nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ env.date }}
          release_name: Nightly Release ${{ env.date }}
          keep_num: 0
          keep_tags: false

    outputs:
      date: ${{ env.date }}

  build-app:
    name: build app

    permissions: write-all

    needs:
      - make-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: dex4er/freelens

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory (Bash)
        if: ${{ runner.os != 'Windows' }}
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - name: Get npm cache directory (Pwsh)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${env:GITHUB_ENV}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python setuptools (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install python-setuptools

      - name: Install minikube (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: v1.30.1

      - name: Install required dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Build Electron app
        run: npm run build:app

      - name: Upload binaries (Bash)
        if: ${{ runner.os != 'Windows' }}
        run: cd open-lens/dist && gh release upload nightly-${{ needs.make-release.outputs.date }} $(yq -r '.files[].url' latest-*.yml)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries (Pwsh)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -RequiredVersion 0.4.2
          Set-Location -Path "open-lens/dist"
          $yamlFiles = Get-ChildItem -Filter 'latest-*.yml'
          $files = foreach ($yamlFile in $yamlFiles) {
            $yamlContent = Get-Content -Path $yamlFile.FullName | ConvertFrom-Yaml
            $yamlContent.files.url
          }
          gh release upload nightly-${{ needs.make-release.outputs.date }} $files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
