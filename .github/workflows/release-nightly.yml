name: Release nightly

on:
  push:
    branches:
      - "**"
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  make-draft-release:
    name: make draft release

    permissions: write-all

    runs-on: ubuntu-latest

    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Delete existing nightly release
        if: github.ref_name == 'dex4er'
        run: gh release delete nightly-${{ env.date }} --yes --cleanup-tag || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly release draft
        if: github.ref_name == 'dexter'
        run: gh release create nightly-${{ env.date }} --draft --title "Nightly Release ${{ env.date }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      date: ${{ env.date }}

  build-app:
    name: build app

    permissions:
      contents: write

    needs:
      - make-draft-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: dex4er/freelens
          ref: dex4er

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory (macOS, Linux)
        if: runner.os != 'Windows'
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - name: Get npm cache directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${env:GITHUB_ENV}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install cross-compiler (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Python setuptools (macOS)
        if: runner.os == 'macOS'
        run: brew install python-setuptools

      - name: Set version number and NPM rebuild (macOS, Linux)
        if: runner.os != 'Windows'
        run: yq -i -pj -oj ".version += \"-nightly-${{ needs.make-draft-release.outputs.date }}\" | .build.npmRebuild = true" package.json

      - name: Set version number and NPM rebuild (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $packageJsonPath = "open-lens\package.json"
          $packageJsonContent = Get-Content -Path $packageJsonPath -Raw
          $packageJson = $packageJsonContent | ConvertFrom-Json
          $packageJson.version = $packageJson.version + "-nightly-${{ needs.make-draft-release.outputs.date }}"
          $packageJson.build.npmRebuild = True
          $updatedPackageJsonContent = $packageJson | ConvertTo-Json -Depth 100
          $updatedPackageJsonContent | Set-Content -Path $packageJsonPath -Force

      - name: Install required dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          DOWNLOAD_ALL_ARCHITECTURES: "runner.os != 'Windows'"

      - name: Build Electron app (macOS)
        if: runner.os == 'macOS'
        run: npm run build:app -- -- -- dmg --publish never --x64 --arm64

      - name: Build Electron app (Linux)
        if: runner.os == 'Linux'
        run: npm run build:app -- -- -- AppImage deb rpm --publish never --x64 --arm64

      - name: Build Electron app (Windows)
        if: runner.os == 'Windows'
        run: npm run build:app -- -- -- nsis --publish never --x64

      - name: Upload binaries (macOS, Linux)
        if: runner.os != 'Windows'
        run: |
          cd open-lens/dist
          rm -f *.blockmap
          gh release upload nightly-${{ needs.make-draft-release.outputs.date }} Freelens-*.* --repo dex4er/freelens-nightly-builds
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-Location -Path "open-lens/dist"
          Remove-Item -Path *.blockmap -Force
          gh release upload nightly-${{ needs.make-draft-release.outputs.date }} Freelens-*.* --repo dex4er/freelens-nightly-builds
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: publish release

    needs:
      - make-draft-release
      - build-app

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish nightly release
        if: github.ref_name == 'dex4er'
        run: gh release edit nightly-${{ needs.make-draft-release.outputs.date }} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
