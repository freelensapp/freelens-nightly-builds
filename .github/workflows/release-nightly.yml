name: Release nightly

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  make-draft-release:
    name: make draft release

    permissions: write-all

    runs-on: ubuntu-latest

    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Delete existing nightly build
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release delete nightly-${{ env.date }} --yes --cleanup-tag || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly build draft
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release create nightly-${{ env.date }} --draft --title "Nightly build ${{ env.date }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      date: ${{ env.date }}

  build-app:
    name: build app

    permissions:
      contents: write

    needs:
      - make-draft-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: arm64
          - os: ubuntu-20.04
            arch: x64
          - os: macos-14
            arch: arm64
          - os: macos-14
            arch: x64
          - os: windows-2022
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: freelensapp/freelens
          ref: main

      - name: Save current revision
        id: current_revision
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        shell: bash
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: |
            sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Flatpak (Linux x64)
        if: runner.os == 'Linux' && matrix.arch == 'x64'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: |
            sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu flatpak flatpak-builder
            sudo flatpak remote-add --if-not-exists --system flathub https://flathub.org/repo/flathub.flatpakrepo
            sudo flatpak install -y --system org.freedesktop.Platform/x86_64/20.08
            sudo flatpak install -y --system org.electronjs.Electron2.BaseApp/x86_64/20.08
            sudo flatpak install -y --system org.freedesktop.Sdk/x86_64/20.08

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: brew install python-setuptools

      - name: Set version number
        shell: bash
        run: cd freelens && jq ".version += \"-nightly-${{ needs.make-draft-release.outputs.date }}\"" package.json > package.json.new && mv -f package.json.new package.json

      - name: Install NPM dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: npm ci

      - name: Rebuild for arch (macOS, Linux)
        if: runner.os != 'Windows'
        run: |
          if [[ ${{ runner.os }} == Linux && ${{ matrix.arch }} == arm64 ]]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi
          npm run rebuild -- -- -a ${{ matrix.arch }}

      - name: Build
        run: npm run build
        env:
          DOWNLOAD_ALL_ARCHITECTURES: "${{ runner.os != 'Windows' }}"

      - name: Build Electron app (macOS)
        if: runner.os == 'macOS'
        run:
          for var in APPLEID APPLEIDPASS APPLETEAMID CSC_LINK CSC_KEY_PASSWORD; do test -n "${!var}" || unset $var; done;
          npm run build:app -- -- -- dmg pkg --publish never --${{ matrix.arch }}
        env:
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLETEAMID: ${{ secrets.APPLETEAMID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Build Electron app (Linux x64)
        if: runner.os == 'Linux' && matrix.arch == 'x64'
        run: npm run build:app -- -- -- AppImage deb flatpak rpm --publish never --${{ matrix.arch }}
        env:
          DEBUG: "@malept/flatpak-bundler"

      - name: Build Electron app (Linux arm64)
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: npm run build:app -- -- -- AppImage deb rpm --publish never --${{ matrix.arch }}
        env:
          DEBUG: "@malept/flatpak-bundler"

      - name: Build Electron app (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run:
          for var in CSC_LINK CSC_KEY_PASSWORD; do test -n "${!var}" || unset $var; done;
          npm run build:app -- -- -- nsis --publish never --${{ matrix.arch }}
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

      - name: Tweak binaries before upload
        shell: bash
        run: |
          find . -name '*pty.node' -print0 | xargs -0 file
          cd freelens/dist
          rm -f *.blockmap
          find . -name '*.dmg' ! -name '*-arm64.dmg' ! -name '*-amd64.dmg' | while read -r f; do
            mv -f "$f" "${f%.dmg}-amd64.dmg"
          done
          find . -name '*.pkg' ! -name '*-arm64.pkg' ! -name '*-amd64.pkg' | while read -r f; do
            mv -f "$f" "${f%.pkg}-amd64.pkg"
          done
          find . -name '*Setup*' | while read -r f; do
            mv -f "$f" "${f/ Setup /-}"
          done

      - name: Upload binaries
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        shell: bash
        run: |
          gh release upload nightly-${{ needs.make-draft-release.outputs.date }} freelens/dist/Freelens*.* --repo freelensapp/freelens-nightly-builds
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      sha: ${{ steps.current_revision.outputs.sha }}

  add-notes-to-release:
    name: add notes to release

    if: ${{ always() }}

    needs:
      - make-draft-release
      - build-app

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add notes to nightly build
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release edit nightly-${{ needs.make-draft-release.outputs.date }} --notes="Based on https://github.com/freelensapp/freelens/tree/${{ needs.build-app.outputs.sha }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: publish release

    needs:
      - make-draft-release
      - build-app
      - add-notes-to-release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish nightly build
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release edit nightly-${{ needs.make-draft-release.outputs.date }} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old nightly builds
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release list --json tagName --jq '.[].tagName' | sort -R | sed 1,10d | xargs -IX -rn1 gh release delete X --cleanup-tag --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
